mảng (array) là một tập hợp các phần tử có cùng kiểu được lưu trữ gần nhau trong bộ nhớ
	Mảng trong Java là một đối tượng chứa các phần tử có kiểu dữ liệu giống nhau, có số lượng phần tử cố định (https://www.javatpoint.com/array-in-java)
	Mảng trong java lưu các phần tử theo chỉ số, chỉ số của phần tử đầu tiên là 0.
		Mảng một chiều
		Mảng đa chiều	
	int[] age = new int[5];
	age[0] = 12;
	age[1] = 4;
	age[2] = 5;
		int[] age = {12, 4, 5, 2, 5};
	Lợi thế của mảng trong Java
		Tối ưu code
		Truy cập ngẫu nhiên

ArrayList là một Collection kiểu danh sách (list) sử dụng cấu trúc mảng để lưu trữ phần tử.
	Thứ tự các phần tử dựa theo thứ tự lúc thêm vào và giá trị của các phần tử này có thể trùng nhau.
	Collection trong Java là một khuôn khổ cung cấp một kiến trúc để lưu trữ và thao tác tới nhóm các đối tượng.
		Tất cả các hoạt động mà bạn thực hiện trên một dữ liệu như tìm kiếm, phân loại, chèn, xóa, ... có thể được thực hiện bởi Java Collection

	ArrayList<String> languages = new ArrayList<>();
	languages.add("Java");
	languages.add("Kotlin");
	languages.add("Python");
	String str = languages.get(1);  // get the element from the arraylist
	languages.set(2, "JavaScript");  // change the element of the array list
	String str = languages.remove(2);  // remove element from index 2
	Collections.sort(languages);
		languages.sort(Comparator.naturalOrder());

duyệt qua 1 Iterator (trình lặp) thì được từng Object (đối tượng)
        Object element = it.next();
        if(element instanceof String) {
                if (String.valueOf(element).matches("[a-zA-Z]")) {
                    System.out.println(element);
                }
            }

map trong Java tương ứng với dict trong Python
        Map<String, Integer> map = new HashMap<String, Integer>();
        map.put(name, phone);
        if (map.get(s) == null) {
            System.out.println("Not found");
        } else {System.out.println(s + "=" + map.get(s));}

ngăn xếp: vào sau ra trước

Trong Java có 2 kiểu dữ liệu:
	kiểu dữ liệu nguyên thủy (Primitivies type) như int, double, …
	kiểu dữ liệu tham chiếu (parameter) như các Wraper class: Integer, Double, …

Một lớp là một nhóm đối tượng có các thuộc tính. Nó là một mẫu hoặc thiết kế từ đó các đối tượng được tạo ra, có thể chứa:
	Thành viên dữ liệu
	Constructor
		Default: Nếu 1 class được triển khai không chứa bất kỳ một constructor nào thì trình biên dịch sẽ tự động thêm default constructor cho class đó.
		No-arg: Là 1 constructor không nhận bất kỳ một tham số nào, điểm khác biệt duy nhất với default constructor nó bên trong no-arg constructor có chứa mã triển khai.
		Parameterized: Constructor có ít nhất một tham số đầu vào gọi là parameterized constructor.
	Phương thức
		Mục đích của constructor là để khởi tạo một object trong khi đó method thực thi các nhiệm vụ để đáp ứng nhu cầu của một object chứa nó.
		Constructor không có kết quả trả về còn method thì có.
		Constructor không thể đi cùng với các từ khoá abstract, final, static etc, method thì được.
		Phương thức static
			Khai báo với mức truy cập là static
			Không thể truy cập vào các phương thức instance và biến instance trực tiếp
			Không thể sử dụng từ khóa this
		Phương thức instance
			Instance method là method mà được gọi trên thể hiện của một lớp.
			Để sử dụng instance method thì phải khởi tạo một object bằng từ khóa new.
			Có thể truy cập vào instance method và instance variable, static method và static variable trực tiếp.
	Phạm vi truy cập
		Access Modifier trong Java xác định phạm vi có thể truy cập của biến, phương thức, constructor hoặc lớp, 4 phạm vi truy cập của Access Modifier như sau:
			private
			default
			protected
			public
		Ngoài ra, còn có nhiều Non-access Modifier như static, abstract, synchronized, native, volatile, transient, ...
Đối tượng được cấp bộ nhớ khi nó được tạo ra. Lớp không được cấp bộ nhớ khi nó được tạo ra.
	class <tên_lớp> {
		// Khai báo danh sách các thuộc tính
		<kiểu_dữ_liệu> <tên_thuộc_tính>;
		...
		// Khai báo danh sách các phương thức
		public <kiểu_trả_về> <tên_phương_thức>(<kiểu_tham_số> <tên_tham_số>, ...) {
			...
		}
		...
	}
		class Student{
			String name;
			int age;
			public void getInformation() {
				
			}
			public void display() {
				
			}
		}
		Student s1 = new Student();
		// Gán giá trị cho thuộc tính name của đối tượng s1
		s1.name = "Long";
Sơ đồ lớp chính là sơ đồ mà nhìn vào đó bạn thấy được mô tả của các lớp, mối quan hệ giữa các đối tượng trong hệ thống.
	Ký tự '-' sẽ tương ứng với phạm vi truy cập private.
	Ký tự '~' sẽ tương ứng với phạm vi truy cập default.
	Ký tự '#' sẽ tương ứng với phạm vi truy cập protected.
	Ký tự '+' sẽ tương ứng với phạm vi truy cập public.
Constructor (phương thức khởi tạo) trong Java được chia làm 2 loại là constructor không tham số (như bài trước bạn đã học) và constructor có tham số
Một lớp có thể chứa các loại biến sau:
	Biến Local
		được định nghĩa bên trong các phương thức, constructor hoặc block code
		sẽ bị hủy khi phương thức đã hoàn thành.
	Biến Instance
		là các biến trong một lớp nhưng ở bên ngoài bất kỳ phương thức nào
		được khởi tạo khi lớp được tải
		có thể được truy cập từ bên trong bất kỳ phương thức, constructor hoặc khối nào của lớp cụ thể đó.
	Biến Class
		được khai báo với một lớp, bên ngoài bất kỳ phương thức nào, với từ khóa static

Tính kế thừa trong Java: các lớp mới có thể được xây dựng dựa trên các lớp đang tồn tại, là sự liên quan giữa hai class với nhau, trong đó có class cha (superclass) và class con (subclass).
	Khi kế thừa class con được hưởng tất cả các phương thức và thuộc tính của class cha. Tuy nhiên, nó chỉ được truy cập các thành viên public và protected, không được phép truy cập đến thành viên private của class cha.
	Các yếu tố quan trọng trong kế thừa trong Java:
		Class (Lớp): Lớp là một kiểu dữ liệu do người dùng định nghĩa trong Java về cơ bản là một nhóm các đối tượng. Nó là một bản thiết kế hoặc mẫu mà từ đó chúng ta tạo ra các đối tượng.
		Super Class: Lớp mà các tính năng và chức năng đang được kế thừa hoặc sử dụng được gọi là lớp cha hoặc lớp cơ sở.
		The extends keyword: Lớp kế thừa các thuộc tính và tính năng từ một lớp khác được gọi là lớp con hoặc lớp dẫn xuất hoặc lớp mở rộng. Lớp con có thể thêm các tính năng và chức năng của riêng nó ngoài các trường và phương thức của lớp cha hoặc lớp cha của nó. 
		The super keyword được sử dụng ở một số trường hợp, cụ thể:
			Có một số tình huống mà các thành viên của lớp cha và lớp con có tên giống nhau. Khi đó từ khóa super được sử dụng để phân biệt các thành viên của lớp cha với các thành viên của lớp con.
			Để gọi hàm tạo lớp cha từ lớp con.
	Ép kiểu (typecasting)
		Up-casting
		Down-casting
			class Animal {}
			class Dog extends Animal {
				public void sound() {}
				public void play() {}
			}
			public static void main(String[] args) {
				Animal animal = new Dog();  // Up-casting
				animal.sound();
				((Dog)animal).play();  // Down-casting
			}
			
Tính đa hình trong Java: 
	Overloading là một kĩ thuật cho phép trong cùng một class có thể có nhiều phương thức cùng tên nhưng khác nhau về số lượng tham số hoặc kiểu dữ liệu tham số, chương trình tự phân biệt dựa trên tham số truyền vào, thể hiện tính đa hình tại compile time.
	Overriding (tên đầy đủ là Method Overriding): lớp con ghi đè phương thức của lớp cha, được dùng để tận dụng được tính đa hình tại runtime.
		Các phương thức final, static, private không thể ghi đè.
		tùy chọn @Override: nếu phương thức bị ghi đè không nằm trong lớp cha thì sẽ báo lỗi

Tính đóng gói trong java
	Đối tượng Composite là sự tổng hợp những thành phần có quan hệ với nhau để tạo ra thành phần lớn hơn
